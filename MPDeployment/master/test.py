import json
import base64
import gzip

def compress_data(data):
    """Compress and encode data using Gzip and Base64"""
    json_data = json.dumps(data).encode('utf-8')
    compressed_data = gzip.compress(json_data)
    return base64.b64encode(compressed_data).decode('utf-8')

def decompress_data(compressed_string):
    """Decode and decompress Base64-encoded Gzip data"""
    compressed_bytes = base64.b64decode(compressed_string)
    json_data = gzip.decompress(compressed_bytes).decode('utf-8')
    return json.loads(json_data)

with open("payload.json", 'r') as f:
            data = json.load(f)
        
        # Parse inputs from the JSON file
inputs = data.get("inputs", [])

print(compress_data(inputs))

data = {
"compressed_data": "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"
}

# Get compressed input data
compressed_input = data.get("compressed_data", None)
if compressed_input is None:
    print({"error": "Missing compressed data"})

# Decompress input data
decompressed_event = decompress_data(compressed_input)


if decompressed_event.__class__ == dict:
    isjson = True
else:
    # json.loads(decompressed_event)
    print('hi')


# Execute model inference
# response = execute_model(decompressed_event, model)

# Compress response before sending it back
# compressed_response = compress_data(response)
print(decompressed_event)
